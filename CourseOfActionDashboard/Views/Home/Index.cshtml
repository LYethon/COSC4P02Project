@using Microsoft.AspNetCore.Http;
@using Newtonsoft.Json;
@{
    ViewData["Title"] = "Home Page";
    var student = ViewData["Student"] as Student;
    var schedule = ViewData["Schedule"] as Schedule;
    var courses = ViewData["Courses"] as List<Course>;
}

<header>
    <nav class="navbar navbar-custom navbar-expand-md navbar-toggleable-sm bg-faded box-shadow mb-3">
        <div class="container">
            <a class="navbar-brand">
                <img src="https://brocku.ca/brand/wp-content/uploads/sites/sites/176/Brocku-logo-screen.png?x44039" width="125" height="70">
            </a>
            <a class="navbar-brand text-white font-weight-bold"> CourseOfActionDashboard</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse mr-2">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link text-white" asp-action="ProfilePage" asp-route-id="@student.Id">Profile</a>
                    </li>
                </ul>
            </div>
            <div class="">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link text-white" asp-area="" asp-controller="Home" asp-action="LoginPage">Logout</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
</header>
<body onload="start()">

    <div class="container">
        <div role="main" class="pb-3">
            @{ if (student != null)
                {
                    <h1>Welcome @student.FullName()</h1>
                    <h1>Email: @student.Email</h1>
                }
            }
        </div>
            <div class="row">
                <div class="container-fluid">
                    <!--Progress Bar Legend-->
                    <div class="legendarea" style="padding-top:3%;">
                        <table style="width:400px;">
                            <tc>
                                <td style="background-color:#00cc00;width:30px;border-radius:5px;">&nbsp;</td>
                                <td>  Scheduled  </td>
                            </tc>
                            <tc>
                                <td style="background-color:lightcoral;width:30px;border-radius:5px;">&nbsp;</td>
                                <td>  Required  </td>
                            </tc>
                        </table>
                    </div>

                    <!--Progress Bar-->
                    <div class="progressarea" style="padding-top:2.5%;">
                        <div class="progress" style="background-color:lightcoral">
                            <div class="progress-bar-striped bg-success" id="percentPlanned" role="progressbar" style="width: 0%" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </div>

                    <!--Credits Statistics-->
                    <div class="statsarea1" style="padding:2.5%;">
                        <div class="statsarea2" style="background-color:lightgrey;border-radius:5px;">
                            <div class="row">
                                <div class="col" style="border:solid;border-radius:5px;background-color:lightgray;">
                                    <table style="width:100%;margin:auto;">
                                        <tr style="font-weight:bold;">
                                            <tc><td>Credits</td></tc>
                                            <tc><td>Scheduled</td></tc>
                                        </tr>
                                        <tr>

                                            <tc><td style="">Overall</td></tc>
                                            <tc><td id="overPlanned" style="">0/0</td></tc>
                                        </tr>
                                        <tr>
                                            <tc><td style="">Social Science</td></tc>
                                            <tc><td id="socPlanned" style="">0/0</td></tc>
                                        </tr>
                                        <tr>
                                            <tc><td style="">Humanities</td></tc>
                                            <tc><td id="humPlanned" style="">0/0</td></tc>
                                        </tr>
                                    </table>
                                </div>

                                <div class="col" style="border:solid;border-radius:5px;background-color:lightgray;">
                                    <table style="width:100%;margin:auto;">
                                        <tr style="font-weight:bold;">
                                            <tc><td>Credits</td></tc>
                                            <tc><td>Scheduled</td></tc>
                                        </tr>
                                        <tr>
                                            <tc><td style="">1alpha00-1alpha99</td></tc>
                                            <tc><td id="1aPlanned" style="">0/0</td></tc>
                                        </tr>
                                        <tr>
                                            <tc><td style="">2alpha00-2alpha99</td></tc>
                                            <tc><td id="2aPlanned" style="">0/0</td></tc>
                                        </tr>
                                        <tr>
                                            <tc><td style="">3alpha00-3alpha99</td></tc>
                                            <tc><td id="3aPlanned" style="">0/0</td></tc>
                                        </tr>
                                        <tr>
                                            <tc><td style="">4alpha00-4alpha99</td></tc>
                                            <tc><td id="4aPlanned" style="">0/0</td></tc>
                                        </tr>
                                    </table>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
    </div>
    <div class="row">
        <!--Required Courses-->
        <div class="col-2 ml-2">
            <div class="courseCheckBox p-2" style="display:none">
                <div class="innerCourseCheckBox">
                    <a class="navbar-brand ml-5 mr-0">Required Courses</a>
                    <ul id="requiredC" class="mb-0">
                    </ul>
                </div>
            </div>
        </div>
        <!--Schedule Options-->
        <div class="container-fluid col-5 p-0">
            <nav class="navbar navbar-expand-lg navbar-light bg-transparent">
                <a class="navbar-brand">Course Scheduler</a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
                    <div class="navbar-nav">
                        <form id="btn_bar" class="form-inline">
                            <button type="button" class="btn btn-outline-primary add_year mr-2" onclick="addYear()">Add Year</button>
                        </form>
                        <form class="form-inline">
                            <button type="button" class="btn btn-outline-success mr-2" onclick="buildJSON(); updateProgress()">Save</button>
                            <button type="button" class="btn btn-outline-secondary mr-2" onclick="resetSchedule()">Reset</button>
                            <button type="button" class="btn btn-outline-secondary" onclick="exportSchedule()">Export</button>
                        </form>
                    </div>
                </div>
            </nav>
            <!--Course Planner-->
            <div style="margin: 10px 0px; background-color: #E4F5FC; overflow-x: auto; min-height: 500px; width: 103%;">
                <div id="course_planner" class="ml-1 d-inline-flex" style="white-space: nowrap; width: 94%; min-height: 490px;">
                    @if (schedule != null)
                    {
                        int yearNum = -1;
                        for (int y = 0; y < schedule.Courses.Count; y++)
                        {
                            if (schedule.Courses[y][0] != null)
                            {
                                yearNum++;
                                <div class="col-3 year_container align-top mt-2 ml-1 mr-1 mb-2 pb-1">
                                    <div class="row year">
                                        <span class="mb-2 mt-3" style="user-select: none">
                                            Year @(yearNum + 1)
                                        </span>
                                        @if (y >= 4)
                                        {
                                            <span class="mt-3 ml-5 remove_year" style="cursor:pointer" onclick="removeYear(this)">
                                                remove
                                                @*<svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="red" class="bi bi-trash" viewBox="0 0 16 16">
                                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                                <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                                                </svg>*@
                                            </span>
                                        }
                                    </div>
                                    <div>
                                        <ul id="ul_year" class="ul_container ul_format">
                                            @for (int i = 0; i < schedule.Courses[y].Count; i++)
                                            {
                                                if (schedule.Courses[y][i] != null)
                                                {
                                                    <li class="row credit_box draggable p-2" draggable="true" style="white-space: normal;">
                                                        <div id="@schedule.Courses[y][i].CID" creditv="@courses[i].CreditValue" class="col-10 courseName pl-2 pr-1">@schedule.Courses[y][i].Subject @schedule.Courses[y][i].Code</div>
                                                        <span class="col-1 remove_btn pl-2" onclick="remove(this)">x</span>
                                                    </li>
                                                }
                                            }
                                        </ul>

                                    </div>
                                </div>
                            }
                            else if (schedule.Courses[y][0] == null && y < 4)
                            {
                                yearNum++;
                                <div class="col-3 year_container align-top mt-2 ml-1 mr-1 mb-2 pb-1">
                                    <div class="row year">
                                        <span class="mb-2 mt-3" style="user-select: none">
                                            Year @(yearNum + 1)
                                        </span>
                                        @if (y >= 4)
                                        {
                                            <span class="mt-3 ml-5 remove_year" style="cursor:pointer" onclick="removeYear(this)">
                                                remove
                                                @*<svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="red" class="bi bi-trash" viewBox="0 0 16 16">
                                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                                <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                                                </svg>*@
                                            </span>
                                        }
                                    </div>
                                    <div>
                                        <ul id="ul_year" class="ul_container ul_format" style="min-height: 400px;">
                                        </ul>
                                    </div>
                                </div>
                            }
                        }
                    }
                </div>
            </div>
        </div>

        <!--Course List-->
        <div class="container-fluid col-2 overflow-auto">
            <input style="min-height: 43px; padding-left: 10px; width: 100%; margin-top: 12px; margin-left: -15px; border-radius: 3px" type="text" id="myInput" onkeyup="filterFunction()" placeholder="Search for courses... ">
            <ul id="myUL" style="overflow-y:scroll; max-height: 475px; width: 125%; margin: 10px 0 0 -55px">
                @for (int i = 0; i < courses.Count; i++)
                {
                    <li class="list-group-item draggable course_list" draggable="true" onmouseover="displayCourseInfo(@courses[i].CID)" onmouseout="hideCourseInfo(@courses[i].CID)">
                        <div id="@courses[i].CID" creditv="@courses[i].CreditValue" style="text-align: center">@courses[i].Subject @courses[i].Code</div>
                    </li>
                }
            </ul>
        </div>

        <!--Course Info-->
        <div id="courseInfo" class="container-fluid col-2 overflow-auto" style="visibility:visible; max-height:500px">
            <div class="navbar-brand">Course Details:</div>
            <div id="courseInfo_name" style="font-family:fantasy"></div>
            <div id="courseInfo_description"></div>
            @for (int i = 0; i < courses.Count; i++)
            {
                <div style="visibility:hidden">
                    <div id="courseInfo_name @courses[i].CID" class="navbar-brand">@courses[i].Code @courses[i].Name:</div>
                    <div id="courseInfo_description @courses[i].CID">@courses[i].Description</div>
                </div>
            }
        </div>

    </div>
    <div class="container" >
        <div class="row "id="message">
            <div class="col  p-0">
                <div class="container-fluid">
                    <button class="alert alert-primary " aria-label="SuccessButton" onclick="switchToWarning()">
                        Warning!
                    </button>
                    <button class="alert" aria-label="SuccessButton" onclick="switchToRecommendation()">
                        Recommendation
                    </button>
                    <button class="alert" aria-label="SuccessButton" onclick="showRequired(this)">
                        Show Required Courses
                    </button>
                </div>
            </div>
            <div class="container-fluid">
                <div class="alert alert-primary" role="alert">
                    <p style="font-size:30px" id="warningTitle"></p>
                    <p id="prerequisites"></p>
                    <p id="social"></p>
                    <p id="humanities"></p>

                </div>
            </div>
        </div>
    </div>

</body>
<footer class="bg-light border-top footer">
    <p class="one small">
        <a href="https://brocku.ca/">Brock University Home</a>
        <a href="https://my.brocku.ca/Portal/Login.aspx?ReturnUrl=%2fportal%2fDefault.aspx">my.brocku.ca</a>
        <a href="https://www.brocku.ca/accessibility">Accessibility</a>
        <a href="https://lms.brocku.ca/access/content/group/Copyright_Info/access/copyright.html">Copying Guidelines</a>
        <a href="https://github.com/LYethon/COSC4P02Project/">Powered By Team Rocket</a>
    </p>
    <p class="small">
        Brock University | Niagara Region |
        <a href="https://brocku.ca/contact">1812 Sir Isaac Brock Way, St. Catharines, Ont., L2S 3A1 Canada</a>
    </p>
    <p class="small">
        <a href="tel://+19056885550">+1 905-688-5550</a>
    </p>
    <p class="small">
        Brock University is located on the traditional lands of the Haudenosaunee and Anishinaabe peoples and traditional shared hunting and gathering grounds of many nations.
    </p>
    <p class="small">
        © Brock University. Other content copyrighted as noted.
    </p>
    <p class="small">
        Powered by <big>Team Rocket</big>
    </p>
</footer>



<script type="text/javascript">
    var showWarning = false;
    var intro = false;
    var scrollM = false;

    function start() {
        checkPrereq();
        updateProgress();
        switchToWarning();

    }

    function warnDuplicates(duplicate) {

        if (duplicate) {
            Swal.fire({
                icon: 'warning',
                title: 'Warning!',
                text: 'There are duplicated courses.',
                showCloseButton: true,
                showCancelButton: true,
                confirmButtonText: 'Never show this again',
                cancelButtonText: 'Okay',

            }).then((result) => {
                if (result.value) {
                    ignore = true;
                }
            })
        }
    }

    function checkContext() {
        const stdIdArray = [];
        const yearContainers = document.querySelectorAll('.courseName')
        yearContainers.forEach(course => {
            stdIdArray.push(course.id);
        })

        $.ajax({
            type: 'get',
            url: "@(Url.Action("pullContext", "Home"))",
            data: { 'idArray': stdIdArray},
            dataType: 'json',
            traditional: true,
            success: function (data) {
                console.log("Success Context");
                var context = [];
                var cid;
                for (var i = 0; i < data.length; i++) {
                    if (data[i] != "") {
                        cid = data[i].split(",");
                        for (var j = 0; j < cid.length; j++) {
                            context.push(cid[j]);
                        }
                    }
                }

                checkValue(context);
            },
            error: function (e) {
                console.log("Error Context");
            }
        });
    }

    function checkValue(context) {
        const stdIdArray = [];
        const yearContainers = document.querySelectorAll('.courseName')
        yearContainers.forEach(course => {
            stdIdArray.push(course.id);
        })

        $.ajax({
            type: 'get',
            url: "@(Url.Action("pullValue", "Home"))",
            data: { 'idArray': stdIdArray},
            dataType: 'json',
            traditional: true,
            success: function (data) {
                console.log("Success Value");

                distribute(context, data);
            },
            error: function (e) {
                console.log("Error Value");
            }

        });
    }

    function distribute(context, value) {

        var socialC = [];
        var humanitiesC = [];


        for (var i = 0; i < context.length; i++) {
            if (context[i] == 'SOCIAL SCIENCES') {
                socialC.push(value[i]);
            }else if (context[i] == 'HUMANITIES') {
                humanitiesC.push(value[i]);
            }
        }
        warningTab(socialC, humanitiesC);
    }

    function switchToWarning() {
        checkPrereq();
        showWarning = true;
        checkContext();
    }

    function switchToRecommendation() {
        showWarning = false;
        checkContext();
    }

    function warningTab(socialC, humanitiesC) {
    var sWarning = false;
    var hWarning = false;
        sRecommend = false;
        hRecommend = false;
    if (socialC.length < 2) {
        document.getElementById("social").innerHTML = "You are missing " + (1 - socialC) + " Social credits."
        sRecommend = true;
        sWarning = true;

    } else {
        document.getElementById("social").innerHTML = ""
    }
    if (humanitiesC.length < 2) {
        document.getElementById("humanities").innerHTML = "You are missing " + (1 - humanitiesC) + " Humanities credits."
        hRecommend = true;
        hWarning = true;
    } else {
        document.getElementById("humanities").innerHTML = ""
    }
        //prob do if click recommendation tab, next to warning
    if (sWarning || hWarning) {
        document.getElementById("warningTitle").innerHTML = "Warning!"
        if (!showWarning) {
            document.getElementById("prerequisites").innerHTML = "";
            document.getElementById("warningTitle").innerHTML = "We recommend:"
        if (sRecommend) {
            var tempSched = config.social_rec;
            var schedu = [];
            for (var i = 0; i < tempSched.length; i++) {
                schedu.push(tempSched[i]);

            }
            var temp = schedu.length;
            const stdIdArray = [];
            const yearContainers = document.querySelectorAll('.courseName')
            yearContainers.forEach(course => {
                stdIdArray.push(course.id);
            })
            //check if recommended courses already taken, if taken, remove courses that needs to be recommended
            for (var i = 0; i < stdIdArray.length; i++) {
                for (var j = 0; j < temp; j++) {
                    if (stdIdArray[i] == schedu[j]) {
                        schedu.splice(j, 1);
                    }
                }
            }

            for (var i = socialC.length; i > 0; i--) {
                schedu.splice(i, 1);
            }
            console.log(schedu);
            $.ajax({
                type: 'get',
                url: "@(Url.Action("pullCourseCode", "Home"))",
                data: { 'idArray': schedu},
                dataType: 'json',
                traditional: true,
                success: function (data) {
                    console.log("Success Value");
                    document.getElementById("social").innerHTML = data + " for Social Science Credits"

                },
                error: function (e) {
                    console.log("Error Value");
                }


            });
        } else {
            document.getElementById("social").innerHTML = ""
        }

        if (hRecommend) {
            var tempSched = config.human_rec;
            var schedu = [];
            for (var i = 0; i < tempSched.length; i++) {
                schedu.push(tempSched[i]);

            }
            var temp = schedu.length;
            const stdIdArray = [];
            const yearContainers = document.querySelectorAll('.courseName')
            yearContainers.forEach(course => {
                stdIdArray.push(course.id);
            })
            //check if recommended courses already taken, if taken, remove courses that needs to be recommended
            for (var i = 0; i < stdIdArray.length; i++) {
                for (var j = 0; j < temp; j++) {
                    if (stdIdArray[i] == schedu[j]) {
                        schedu.splice(j, 1);
                    }
                }
            }

            for (var i = humanitiesC.length; i > 0; i--) {
                schedu.splice(i, 1);
            }

            $.ajax({
                type: 'get',
                url: "@(Url.Action("pullCourseCode", "Home"))",
                data: { 'idArray': schedu },
                dataType: 'json',
                traditional: true,
                success: function (data) {
                    console.log("Success Value");
                    document.getElementById("humanities").innerHTML = data + " for Humanities Credits"

                },
                error: function (e) {
                    console.log("Error Value");
                }


            });
        } else {
            document.getElementById("humanities").innerHTML = ""
        }
        }

        if (!intro && !scrollM) {
            document.getElementById('message').scrollIntoView({ behavior: 'smooth', block: 'end' });
            intro = true;
        } else if (intro && !scrollM) {
            document.getElementById('message').scrollIntoView({ behavior: 'smooth', block: 'end' });
            scrollM = true;
        }
    } else {
        document.getElementById("warningTitle").innerHTML = ""
    }

    }

   const preReq = [];
    //This will check for duplicate prerequisites code
    function checkDup(cid) {
        var same = false;
        for (var i = 0; i < preReq.length; i++) {
            if (preReq[i] == cid) {
                same = true;
                break;
            }
        }
        if (same == false) {
            preReq.push(cid);
        }
    }

    //This method will get the preReqs for all the courses on the planner
    function checkPrereq() {
         const stdIdArray = [];
         const courseName = [];
        const yearContainers = document.querySelectorAll('.courseName')
         yearContainers.forEach(course => {
             stdIdArray.push(course.id);
             courseName.push(course.textContent);
         })

        $.ajax({
            type: 'get',
            url: "@(Url.Action("pullPrereqs", "Home"))",
            data: { 'idArray': stdIdArray},
            dataType: 'json',
            traditional: true,
            success: function (data) {
                console.log("Success Prereq");
                var cid;
                const preReqOG = []
                for (var i = 0; i < data.length; i++) {
                    preReqOG.push(data[i]);
                    if (data[i] != "") {
                        cid = data[i].split(",");
                        for (var j = 0; j < cid.length; j++) {
                            checkDup(cid[j]);
                        }
                    }
                }
                  const courseSub = [];
                  //get the course name
                  $.ajax({
                    type: 'get',
                    url: "@(Url.Action("pullCourseCode", "Home"))",
                    data: { 'idArray': preReq},
                    dataType: 'json',
                    traditional: true,
                    success: function (data) {
                        console.log("Success course subject");
                        //Store the course subject for later
                        for (var i = 0; i < data.length; i++) {
                            courseSub.push(data[i]);
                        }
                        console.log(preReqOG, "WHY?");
                        console.log(courseSub, "course code");
                        console.log(courseName, "Course List in containter");
                        var unsatisfied = false;
                        var ss = []; //preReqs for a course with more than 1
                        for (var i = 0; i < preReqOG.length; i++) {
                            ss.push(preReqOG[i].split(","));
                        }
                        var prereqM = "";
                        for (var i = 0; i < preReq.length; i++) {
                            for (var j = 0; j < stdIdArray.length; j++) {
                                //Works only for exactly one preReq
                                if (preReq[i] != stdIdArray[j]) {
                                    unsatisfied = true;
                                } else {
                                    unsatisfied = false;
                                    break;
                                }
                            }
                            //This part will display the warning
                            if (unsatisfied) {

                                for (var k = 0; k < stdIdArray.length; k++) {
                                    for (var j = 0; j < preReqOG[k].length; j++) {
                                        if (preReq[i] == ss[k][j]) {
                                            console.log(courseName[k], " required course(s): ", courseSub[i]);
                                            prereqM += courseName[k] + " required course(s): " + courseSub[i] + "<br><br><br>";

                                        }
                                    }
                                }

                                unsatisfied = false;
                            }
                        }
                        document.getElementById("prerequisites").innerHTML = prereqM;

                    },
                    error: function (e) {
                        console.log("Error Prereq");
                    }
                  });
            },
            error: function (e) {
                console.log("Error Prereq");
            }
        });
    }

    function showRequired(b) {
        var elem = $(".courseCheckBox")[0];
        if (elem.style.display === "none") {
            elem.style.display = "block";
            b.innerText = "Hide Required Courses";
        } else {
            elem.style.display = "none";
            b.innerText = "Show Required Courses";
        }
    }



    function alertMessage(num) {
        switch (num) {
            case 0:
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'This alert box could indicate a successful or positive action!',
                });
                break;
            case 1:
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'This alert box could indicate a dangerous or potentially negative action!',
                })
                break;
            case 2:
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'This alert box could indicate a warning that might need attention!',
                })
                break;
            case 3:
                Swal.fire({
                    icon: 'info',
                    title: 'Info',
                    text: 'This alert box could indicate a neutral informative change or action!',
                })
                break;
            default:
                return;
        }
    }

    function saveSched() {
        var studentJson = @Html.Raw(Json.Serialize(@student));

        $.ajax({
            type: 'POST',
            url: "@(Url.Action("saveSchedule", "Home"))",
            data: { json: JSON.stringify(studentJson) },
            success: function (msg) {
               // console.log("Success");
            },
            error: function (e) {
                console.log("Error");
            }
        });
    }
    function clearChecks() {
        for (var c = 0; c < $(".courseCheck").length; c++) {
            //$($(".courseCheck")[c]).attr('checked', false);
            $($(".courseCheck")[c]).find(".checkmark").css("display", "none");;
            $($(".courseCheck")[c]).find(".questionmark").css("display", "block");;
        }

    }
    function checkRequiredCourses() {
        //Clear Checks
        clearChecks();

        //Create courseArray List
        const courseArray = [];
        var yearList = document.getElementsByClassName("year_container");
        for (var i = 0; i < yearList.length; i++) {
            var idArray = [];
            var courseList = yearList[i].getElementsByClassName("courseName");
            for (var q = 0; q < courseList.length; q++) {
                idArray.push(parseInt(courseList[q].id));
            }
            if (courseList.length == 0) {
                idArray.push(-1);
            }
            courseArray.push(idArray);
        }

        const defaultSched = config.default_sched;
        $.ajax({
            type: 'POST',
            url: "@(Url.Action("compareSchedules", "Home"))",
            data: { requiredId: courseArray, currentId: defaultSched },
            success: function (currentRequiredCourses) {
                //Display Required Courses
                if ($(".courseCheck").length == 0) {
                    const defaultSched = config.default_sched;
                    for (var p = 0; p < defaultSched.length; p++) {
                        for (var q = 0; q < defaultSched[p].length; q++) {
                            $.ajax({
                                type: 'POST',
                                url: "@(Url.Action("getCourse", "Home"))",
                                async: false,
                                data: { id: defaultSched[p][q] },
                                success: function (data) {
                                   // console.log("Success");
                                    $("#requiredC").append('<li class="pb-1 row" style="list-style-type: none"><div class="col-8">' + data.subject + ' ' + data.code + ' </div><div id="' + data.cid + '" class="col-3 pl-0 courseCheck"><span title="Course in Schedule" class="checkmark" style="display:none">&#10004</span><span title="Missing Course in Schedule" class="questionmark" style="display:block">&#10068</span></div></li>');
                                },
                                error: function (e) {
                                    console.log("Error");
                                }
                            });
                        }
                    }
                }
                //Check Checkbox if course is in users schedule
                for (var a = 0; a < currentRequiredCourses.courses.length; a++) {
                    for (var b = 0; b < currentRequiredCourses.courses[a].length; b++) {
                        for (var c = 0; c < $(".courseCheck").length; c++) {
                            if ($($(".courseCheck")[c]).attr('id') == currentRequiredCourses.courses[a][b].cid) {
                                $($(".courseCheck")[c]).find(".checkmark").css("display", "block");
                                $($(".courseCheck")[c]).find(".questionmark").css("display", "none");
                            }

                        }
                    }
                }
            },
            error: function (e) {
                console.log("Error");
            }
        });
    }

    function buildJSON() {
        const courseArray = [];

        var yearList = document.getElementsByClassName("year_container");
        for (var i = 0; i < yearList.length; i++) {
            var idArray = [];
            var courseList = yearList[i].getElementsByClassName("courseName");
            for (var q = 0; q < courseList.length; q++) {
                idArray.push(parseInt(courseList[q].id));
            }
            if (courseList.length == 0) {
                idArray.push(-1);
            }
            courseArray.push(idArray);
        }
        //console.log(courseArray);

        $.ajax({
            type: 'POST',
            url: "@(Url.Action("saveSchedule", "Home"))",
            data: { idList: courseArray, studentId:@student.Id},
            success: function (msg) {
                //console.log("Success");
            },
            error: function (e) {
                console.log("Error");
            }
        });

    }

    // export student schedule as a csv
    function exportSchedule() {

        $.ajax({
            url: "@(Url.Action("ExportSchedule", "Home"))",
            contentType: 'application/json; charset=utf-8',
            data: { studentId:@student.Id },
            type: 'GET',
            beforeSend: function () {
                buildJSON();
            },
            success: function () {
                window.location = "@(Url.Action("ExportSchedule", "Home", new { studentId = @student.Id }))"
            }
        });
    }

    function resetSchedule() {
        const defaultSched = config.default_sched;
        $.ajax({
            type: 'POST',
            url: "@(Url.Action("saveSchedule", "Home"))",
            data: { idList: defaultSched, studentId:@student.Id},
            success: function (msg) {
               // console.log("Success");
            },
            error: function (e) {
                console.log("Error");
            }
        });
    }


    //given a year container, this function will return the total weights of each course
    function getCreditValues(container) {
        const idArray = []
        const cont = container.querySelectorAll('.credit_box')
        cont.forEach(course => {
            //if (!course.classList.contains('.dragging'))
            idArray.push(parseInt(course.children[0].id));
        })
       // console.log(idArray)
        //fetch credit values based off IDs
        $.ajax({
            type: 'get',
            url: "@(Url.Action("pullCreditValue", "Home"))",
            data: { 'idArray': idArray },
            dataType: 'json',
            traditional: true,
            success: function (data) {
                //console.log("Success - CreditValue");
                totalWeight = 0.0;
                data.forEach(weight => {
                    totalWeight += weight
                })
                //console.log("total weight: " + totalWeight)
                callback(data, totalWeight)
            },
            error: function (e) {
                console.log("Error Pull");
            }
        });
    }

 function updateProgress() {

        const idArray = [];
        const yearContainers = document.querySelectorAll('.courseName')
        yearContainers.forEach(course => {
        idArray.push(course.id);
        })

       // console.log(idArray);

    //get number of 1alphas
    $.ajax({
            type: 'GET',
            url: "@(Url.Action("PullAlpha1Values", "Home"))",
            data: { 'idArray': idArray},
            dataType: 'json',
            traditional: true,
            success: function (data) {
                showProgress('1alpha',data); //send number and type to showdata method
            },
            error: function (e) {
                console.log("Error");
            }
        });

    //get number of 2 alphas
    $.ajax({
            type: 'GET',
            url: "@(Url.Action("PullAlpha2Values", "Home"))",
            data: { 'idArray': idArray},
            dataType: 'json',
            traditional: true,
            success: function (data) {
                showProgress('2alpha',data); //send number and type to showdata method
            },
            error: function (e) {
                console.log("Error");
            }
        });

    //get number of 3 alphas
    $.ajax({
            type: 'GET',
            url: "@(Url.Action("PullAlpha3Values", "Home"))",
            data: { 'idArray': idArray},
            dataType: 'json',
            traditional: true,
            success: function (data) {
                showProgress('3alpha',data); //send number and type to showdata method
            },
            error: function (e) {
                console.log("Error");
            }
        });

    //get number of 4 alphas
    $.ajax({
            type: 'GET',
            url: "@(Url.Action("PullAlpha4Values", "Home"))",
            data: { 'idArray': idArray},
            dataType: 'json',
            traditional: true,
            success: function (data) {
                showProgress('4alpha',data); //send number and type to showdata method
            },
            error: function (e) {
                console.log("Error");
            }
        });

    //get number of soc scis
    $.ajax({
            type: 'GET',
            url: "@(Url.Action("PullSocSciValues", "Home"))",
            data: { 'idArray': idArray},
            dataType: 'json',
            traditional: true,
            success: function (data) {
                showProgress('socSci',data); //send number and type to showdata method
            },
            error: function (e) {
                console.log("Error");
            }
        });


    //get number of humanities
    $.ajax({
            type: 'GET',
            url: "@(Url.Action("PullHumanValues", "Home"))",
            data: { 'idArray': idArray},
            dataType: 'json',
            traditional: true,
            success: function (data) {
                showProgress('human',data); //send number and type to showdata method
            },
            error: function (e) {
                console.log("Error");
            }
        });

    $(document).ready(function () {
        checkRequiredCourses()
    });

     //get number of overall creds
    $.ajax({
            type: 'GET',
            url: "@(Url.Action("PullTotalCredValues", "Home"))",
            data: { 'idArray': idArray},
            dataType: 'json',
            traditional: true,
            success: function (data) {
                showProgress('total',data); //send number and type to showdata method
            },
            error: function (e) {
                console.log("Error");
            }
        });
      }

    function showProgress(type,num){
        var totOverall = 20;
        var totSocSci = 1;
        var totHuman = 1;
        var tot1alpha = 8;
        var tot2alpha = 3;
        var tot3alpha = 3;
        var tot4alpha = 0;

    if(type == '1alpha') document.getElementById("1aPlanned").innerHTML = (num) + " / " + tot1alpha + " max. allowed";
    if(type == '2alpha') document.getElementById("2aPlanned").innerHTML = (num) + " / " + tot2alpha + " required";
    if(type == '3alpha') document.getElementById("3aPlanned").innerHTML = (num) + " / " + tot3alpha + " required";
    if(type == '4alpha') document.getElementById("4aPlanned").innerHTML = (num) + " / " + tot4alpha + " required";
    if(type == 'socSci') document.getElementById("socPlanned").innerHTML = (num) + " / " + totSocSci + " required";
    if(type == 'human') document.getElementById("humPlanned").innerHTML = (num) + " / " + totHuman + " required";
    if(type == 'total'){
    document.getElementById("overPlanned").innerHTML = (num) + " / " + totOverall + " required";
    var percentPlanned = "width:" + ((num / totOverall) * 100) + "%";
    document.getElementById("percentPlanned").setAttribute("style", percentPlanned);
    }
    }

</script>